<?php
/**
 * Replace this copyright statement with your own.  All the generated code
 * will include this copyright statement
 */
define('COPYRIGHT',"/**
 * @copyright 2011 City of Bloomington, Indiana
 * @license http://www.gnu.org/licenses/agpl.txt GNU/AGPL, see LICENSE.txt
 * @author Cliff Ingham <inghamn@bloomington.in.gov>
 */");
/**
 * Used to keep sessions on the same webserver seperate;
 */
define('APPLICATION_NAME','application_name');

/**
 * Where on the filesystem this application is installed
 */
define('APPLICATION_HOME','/var/www/sites/application_name');

/**
 * The URL to get to this site
 * Do NOT use a trailing slash
 */
define('BASE_URL','http://localhost');

/**
 * Some default values for Tickets in the system
 */
define('DEFAULT_CITY','Bloomington');
define('DEFAULT_STATE','IN');

/**
 * Where on the filesystem the framework is installed.
 */
define('FRAMEWORK',APPLICATION_HOME.'/libraries/framework');

/**
 * This needs to point to the library directory inside your
 * installation of the ZendFramework
 * http://framework.zend.com
 */
define('ZEND',APPLICATION_HOME.'/libraries/ZendFramework/library');
ini_set('include_path','.'.PATH_SEPARATOR.ZEND);
require_once 'Zend/Loader/Autoloader.php';
Zend_Loader_Autoloader::getInstance();

/**
 * YUI
 * What host do you want to use for the YUI libraries
 */
define('YUI','http://ajax.googleapis.com/ajax/libs/yui/3.3.0/build');

/**
 * Used when there's an error on the site.  The Framework will
 * print out a nice error message, encouraging users to report any problems
 * See: FRAMEWORK/ITSFunctions.inc
 *
 * This is also the default Admin user information that gets added to the database
 */
define('ADMINISTRATOR_NAME','Site Admin');
define('ADMINISTRATOR_EMAIL','admin@servername.com');

/**
 * Set how we want to handle errors
 * PHP_DEFAULT - do whatever's configured in php.ini
 *
 * If you do not define error handling to PHP_DEFAULT
 * the custom error handlers kick in.  All of the custom error display
 * frunctions are in FRAMEWORK/globalFunctions.inc.  The custom error
 * function decide what to do based on $ERROR_REPORING array values
 *
 * PRETTY_PRINT - Display a message in the browser
 * EMAIL_ADMIN - email the Administrator
 * EMAIL_USER - email the logged in user
 * SKIDDER - post errors to a Skidder server (see config below)
*/
define('ERROR_REPORTING','PHP_DEFAULT');
//define('ERROR_REPORTING','CUSTOM');
//$ERROR_REPORTING = array('PRETTY_PRINT','SKIDDER');
/**
 * Skidder is a web service for error notifications.  Error reporting supports
 * posting errors to a Skidder server.  You must register for an application_id
 * on the skidder server you want to post errors to.
 */
//define('SKIDDER_URL','http://localhost/skidder/home.php');
//define('SKIDDER_APPLICATION_ID',);

/**
 * Database Setup
 */
define('DB_ADAPTER','mongodb');
define('DB_HOST','localhost');
define('DB_NAME','crm');

/**
 * LDAP Configuration
 *
 * This is required only if you want to use the LDAP authentication
 * If you do not want to use LDAP authentication, you can comment this out
 */
define('LDAP_DOMAIN','ldap.domain.somewhere');
define('LDAP_DN','ou=people,o='.LDAP_DOMAIN);
define('LDAP_USERNAME_ATTRIBUTE','uid');
define('LDAP_ADMIN_USER','username');
define('LDAP_ADMIN_PASS','password');
define('LDAP_SERVER','ldaps://ldap.somewhere.com:636'); // Example for SSL
define('LDAP_PASSWORD_ATTRIBUTE','userpassword');

/**
 * CAS authentication http://www.jasig.org/cas
 *
 * This is requried only if you want to do CAS authentication
 *
 * http://code.google.com/p/simplecas/
 *
 * SimpleCAS is a PHP library for handling the calls to the CAS service
 * The version we're running right now has been modified to remove
 * the depency on HTTP_Request2.  Instead, it uses curl
 */
define('CAS','/var/www/libraries/SimpleCAS');
define('CAS_SERVER','cas.somewhere.org');
define('CAS_URI','cas');

/**
 * Import global functions that we use for many applications we write
 */
include FRAMEWORK.'/globalFunctions.php';
spl_autoload_register('autoload');

/**
 * Session Startup
 * Don't start a session for CLI usage.
 * We only want sessions when PHP code is executed from the webserver
 */
if (!defined('STDIN')) {
	ini_set('session.save_path',APPLICATION_HOME.'/data/sessions');
	session_start();
}

/**
 * Load the Zend_Acl
 * Access control is going to handled using the Zend_Acl
 * We only need to load it, if someone is logged in
 */
if (isset($_SESSION['USER'])) {
	include APPLICATION_HOME.'/access_control.inc';
}

/**
 * Addresses can be validated against a master address web service
 */
define('ADDRESS_SERVICE','http://localhost/master_address');

/**
 * Rental addresses have additional information we can look up
 * Owner information is being provided from this service
 */
define('RENTAL_SERVICE','http://localhost/rentpro/RentService');

/**
 * Date format
 * All dates will use this format
 */
define('DATE_FORMAT','Y-m-d');

/**
 * Caching
 * Selecting distinct values from the full collection in Mongo is really slow.
 * As of r493, the only place this call is made is when displaying the search form
 * The search form populates a bunch of drop down boxes based on these queries
 * Enabling this cache can greatly improve the speed of the search form,
 * at the expense of one of the drop-downs not reflecting the latest values
 * See: Ticket::getDistinct()
 */
define('DISTINCT_QUERY_CACHE',true);
define('DISTINCT_QUERY_CACHE_LIFETIME',3600); // Lifetime in seconds
